////using vector as map to eliminate tle

string smallestWindow (string s, string p)
    {
        // Your code here
        //unordered_map<char,int>mp;
        vector<int>mp(26,0);
        int count=0;
        for(int i=0;i<p.size();i++){
            mp[p[i]-'a']++;
            
        }
        for(int i=0;i<mp.size();i++){
            if(mp[i]>0)count++;
        }
        
       // cout<<"count = "<<count<<endl;
        int i=0;
        int j=0;
        vector<pair<int,int>>v;
        while(i<=j&&j<s.size()){
            //cout<<"singh"<<endl;
            if(find(p.begin(),p.end(),s[j])!=p.end()){
                mp[s[j]-'a']--;
                if(mp[s[j]-'a']==0)count--;
               // cout<<count<<endl;
                if(count==0){
                    while(find(p.begin(),p.end(),s[i])==p.end()||mp[s[i]-'a']<0){
                        if(find(p.begin(),p.end(),s[i])!=p.end())mp[s[i]-'a']++;
                        i++;
                    }
                  // cout<<" i= "<<i<<" j= "<<j<<endl;
                    v.push_back({i,j});
                }
            }
            j++;
        }
         string ans;
        if(v.size()==0)return to_string(-1);
        else{
           
            int mn=INT_MAX;
            int start=0,end=0;
            for(int i=0;i<v.size();i++){
                if(mn>v[i].second-v[i].first){
                    mn=v[i].second-v[i].first;
                    start=v[i].first;
                    end=v[i].second;
                    
                }
            }
            for(int i=start;i<=end;i++){
                ans.push_back(s[i]);
            }
        }
        return ans;
    }
////using map

  string minWindow(string s, string t) {
        unordered_map<char,int>mp;
          string ans;
        if(t.size()>s.size())return ans;
        for(int i=0;i<t.size();i++){
           mp[t[i]]++;
        }
        int count=mp.size();
        int i=0,j=0;
        int start=-1,end=-1,mn=INT_MAX;
        while(i<=j&&j<s.size()){
               if(mp.find(s[j])!=mp.end()){
                   mp[s[j]]--;
                  if(mp[s[j]]==0)count--;
             }
            if(count==0){
              while(mp.find(s[i])==mp.end()||mp[s[i]]<0){
                   if(mp.find(s[i])!=mp.end())mp[s[i]]++;
                  i++;
              }
                if(mn>j-i+1){
                    mn=j-i+1;
                   start=i;
                    end=j;
                }
            }
            j++;
        }
        if(start<0||end<0)return ans;
        for(int i=start;i<=end;i++){
          ans.push_back(s[i]);
        }
      
        
        return ans;
    }
